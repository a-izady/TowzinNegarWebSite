<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="indexH1" xml:space="preserve">
    <value>TowznNegarWeighbridge software</value>
  </data>
  <data name="indexP1" xml:space="preserve">
    <value>Automation of road weighing systems</value>
  </data>
  <data name="indexP10" xml:space="preserve">
    <value>Bascule</value>
  </data>
  <data name="indexP11" xml:space="preserve">
    <value>The Bascule are not structurally very different from the floor scales and use the same load cell structure (weighing sensor) for measurement. The difference is in the weighing capacity range, with the scales weighing much more than the scales. Historically, the use of scales should be equated with scales.</value>
  </data>
  <data name="indexP12" xml:space="preserve">
    <value>Send SMS</value>
  </data>
  <data name="indexP2" xml:space="preserve">
    <value>Powerful SQL Server database</value>
  </data>
  <data name="indexP3" xml:space="preserve">
    <value>Installed in all parts of Iran with 24-hour service</value>
  </data>
  <data name="indexP4" xml:space="preserve">
    <value>Various reporting with Excel and PDF output</value>
  </data>
  <data name="indexP5" xml:space="preserve">
    <value>Receive weight without user intervention and the ability to connect to all weighing indicators available in the market</value>
  </data>
  <data name="indexP6" xml:space="preserve">
    <value>Bascule indicator</value>
  </data>
  <data name="indexP7" xml:space="preserve">
    <value>The main task is to show the weight in each electronic scale or scale to receive the weight information read from the load cells and convert it into a digit and display the weight.
             In this way, the output wire from the box junction is connected to the scale display and the weight number is displayed on the display.</value>
  </data>
  <data name="indexP8" xml:space="preserve">
    <value>Load Cell</value>
  </data>
  <data name="indexP9" xml:space="preserve">
    <value>Load cell is a type of electronic sensor for measuring weight that is used in weighing systems. This product senses the weight going up and down based on the change in voltage according to the weight of the applied load and transmits it to the electronic display.</value>
  </data>
  <data name="LangName" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>زبان</value>
  </data>
  <data name="menu1" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="menu2" xml:space="preserve">
    <value>Scale software</value>
  </data>
  <data name="menu3" xml:space="preserve">
    <value>Weighing equipment</value>
  </data>
  <data name="menu4" xml:space="preserve">
    <value>WebApp</value>
  </data>
  <data name="menu5" xml:space="preserve">
    <value>Contact us</value>
  </data>
  <data name="more _information" xml:space="preserve">
    <value>more  information</value>
  </data>
</root>