<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="indexH1" xml:space="preserve">
    <value>نرم افزار باسکول توزین نگار</value>
  </data>
  <data name="indexP1" xml:space="preserve">
    <value>اتوماسیون سیستم ها توزین جاده ای</value>
  </data>
  <data name="indexP10" xml:space="preserve">
    <value>باسکول صنعتی</value>
  </data>
  <data name="indexP11" xml:space="preserve">
    <value>باسکول از نظر ساختاری تفاوت چندانی با ترازو ندارد و از همان ساختار لودسل (حسگر توزین) برای اندازه گیری استفاده می کند. تفاوت در بازه ظرفیت توزین است که باسکول ها اوزان بسیار بیشتری را نسبت به ترازو می سنجند. از نظر تاریخی نیز باید استفاده از باسکول را با ترازو یکی دانست.</value>
  </data>
  <data name="indexP12" xml:space="preserve">
    <value>ارسال اس ام اس</value>
  </data>
  <data name="indexP2" xml:space="preserve">
    <value>دیتابیس پر قدرت اس کیو ال سرور</value>
  </data>
  <data name="indexP3" xml:space="preserve">
    <value>نصب شده در کلیه نقاط ایران بهمراه خدمات 24 ساعته</value>
  </data>
  <data name="indexP4" xml:space="preserve">
    <value>گزارش گیری متنوع بهمراه خروجی اکسل و پی دی اف</value>
  </data>
  <data name="indexP5" xml:space="preserve">
    <value>دریافت وزن بدون دخالت کاربر و قابلیت اتصال به کلیه نشاندهنده های توزین موجود در بازار</value>
  </data>
  <data name="indexP6" xml:space="preserve">
    <value>نشاندهنده باسکول</value>
  </data>
  <data name="indexP7" xml:space="preserve">
    <value>وظیفه اصلی نشان دهنده وزن در هر ترازو یا باسکول الکترونیکی دریافت اطلاعات وزن خوانده شده از لودسل ها و تبدیل آن به رقم  و نمایش وزن می باشد.
            بدین ترتیب که سیم خروجی از جانکش باکس به نمایشگر باسکول متصل میگردد و عدد وزن بر روی نمایشگر نشان داده می شود .</value>
  </data>
  <data name="indexP8" xml:space="preserve">
    <value>لودسل (Load Cell)</value>
  </data>
  <data name="indexP9" xml:space="preserve">
    <value>لودسل یا Load Cell یک نوع حسـگر الکترونیکی برای اندازه‌گیری وزن است که در سیـستم‌های تـوزین مورد استـفاده قـرار می‌گیرد. این محـصول بالا و پایین رفتن  وزن را بر اساس تغییر ولتاژ طبق وزن بار اعمال شده حس می‌کند و آن را به نمایشگر الکتـرونیـکی منتـقل می‌کنند</value>
  </data>
  <data name="LangName" xml:space="preserve">
    <value>فارسی</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>Lang</value>
  </data>
  <data name="menu1" xml:space="preserve">
    <value>خانه</value>
  </data>
  <data name="menu2" xml:space="preserve">
    <value>نرم افزار باسکول</value>
  </data>
  <data name="menu3" xml:space="preserve">
    <value>تجهیزات باسکول</value>
  </data>
  <data name="menu4" xml:space="preserve">
    <value>تحت وب</value>
  </data>
  <data name="menu5" xml:space="preserve">
    <value>ارتباط با ما</value>
  </data>
  <data name="more _information" xml:space="preserve">
    <value>اطلاعات بیشتر</value>
  </data>
</root>